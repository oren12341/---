#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

// Reader-Writer Lock Structure
typedef struct {
    sem_t lock;      // Semaphore for protecting readcount
    sem_t writelock; // Semaphore for writer access
    int readcount;   // Number of active readers
} rwlock_t;

// Initialize the reader-writer lock
void rwlock_init(rwlock_t *rw) {
    rw->readcount = 0;
    sem_init(&rw->lock, 0, 1);
    sem_init(&rw->writelock, 0, 1);
}

// Acquire read lock
void rwlock_acquire_readlock(rwlock_t *rw) {
    sem_wait(&rw->lock);
    rw->readcount++;
    if (rw->readcount == 1) {
        sem_wait(&rw->writelock); // First reader locks writer
    }
    sem_post(&rw->lock);
}

// Release read lock
void rwlock_release_readlock(rwlock_t *rw) {
    sem_wait(&rw->lock);
    rw->readcount--;
    if (rw->readcount == 0) {
        sem_post(&rw->writelock); // Last reader unlocks writer
    }
    sem_post(&rw->lock);
}

// Acquire write lock
void rwlock_acquire_writelock(rwlock_t *rw) {
    printf("Writer is waiting to write...\n"); // Indicate writer is blocked
    sem_wait(&rw->writelock);
}

// Release write lock
void rwlock_release_writelock(rwlock_t *rw) {
    sem_post(&rw->writelock);
}

// Reader function
void *reader(void *arg) {
    rwlock_t *rw = (rwlock_t *)arg;
    while (1) { 
        rwlock_acquire_readlock(rw);
        printf("Reader is reading\n");
        sleep(1); 
        rwlock_release_readlock(rw);
        sleep(1); // Prevent immediate re-entry, making it harder for writers
    }
    return NULL;
}

// Writer function
void *writer(void *arg) {
    rwlock_t *rw = (rwlock_t *)arg;
    while (1) { 
        rwlock_acquire_writelock(rw);
        printf("Writer is writing\n");
        sleep(2); // Simulate writing
        rwlock_release_writelock(rw);
        sleep(1); // Recovery time before trying again
    }
    return NULL;
}

int main() {
    pthread_t r[5], w[2];
    rwlock_t rw;

    rwlock_init(&rw);

    // Create writers first to observe starvation issue
    for (long i = 0; i < 2; i++) {
        pthread_create(&w[i], NULL, writer, &rw);
    }

    // Create readers with slight delay to exaggerate starvation
    for (long i = 0; i < 5; i++) {
        sleep(1);
        pthread_create(&r[i], NULL, reader, &rw);
    }

    // Infinite loop to keep program running
    while (1) {
        sleep(10);
    }

    return 0;
}
