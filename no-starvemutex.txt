#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_THREADS 5

sem_t queue;         // Semaphore for managing the queue
int next_id = 0;     // The next thread ID that can enter the critical section
int current_id = 0;  // Counter for assigning thread IDs

void *threadFunc(void *arg) {
    int my_id;

    // Assign a unique ID to the thread
    sem_wait(&queue);
    my_id = current_id++;
    sem_post(&queue);

    // Wait for its turn
    while (my_id != next_id);

    // Critical section
    printf("Thread %d is entering the critical section\n", my_id);
    sleep(1); // Simulate work in the critical section
    printf("Thread %d is leaving the critical section\n", my_id);

    // Allow the next thread to proceed
    next_id++;

    return NULL;
}

int main() {
    pthread_t threads[NUM_THREADS];

    // Initialize the semaphore
    sem_init(&queue, 0, 1);

    // Create threads
    for (long i = 0; i < NUM_THREADS; i++) {
        pthread_create(&threads[i], NULL, threadFunc, (void *)i);
    }

    // Wait for threads to finish
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    return 0;
}
